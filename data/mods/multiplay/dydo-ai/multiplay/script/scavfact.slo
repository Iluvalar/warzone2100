// Scavenger MultiPlayer Factory (one) Script
// Modified Version for DyDo package


/*
x allied with AI player #0 (or #1 is player #0 is human)
x build up to x droids of 9 types
x add each new droid to the defenGroup
x if defenGroup has x droids, send off to attack enemy stuff (mainly human targets)
x first attack starts after x seconds
x two teams wandering likes oil resources

  v1.1
x defend team to defend owned structures and units when attacked. Only droids 
    within a cetrain range will be sent to defend
x scavenger AI is performing random researches
x AI builds 2 x research labs if not present at the start of the game

  v1.2
x fixed a bug in wanderTeams events

  v1.2.1
x fixed a bug droidAttacked event


+ pursure certain vital researches, mainly metals, armors and damage
*/

// scavenger values
#define SCAVAI_VERSION "1.2.1"
#define MAX_PLAYERS 8
#define	TILE				128
#define MAX_WHILE_LOOPS 99
#define WANDER_DROIDS 4
#define MIN_DEFEND_DROIDS 7
#define MIN_ATT_DROIDS 10
#define TIME_FIRST_ATTACK 1200
#define	GAME_TIME_IN_MIN	(gameTime / 10 / 60)
#define SCAV_DEF_RANGE (26*128)


public		int		enemy1,buildX,buildY;
public		int		maxDroids;
public    RESEARCHSTAT research[10];

public    int nStructures;
public    STRUCTURESTAT aBaseStr[4];
public		STRUCTURESTAT	factory,derrick,cybfact,powerGen,resLab;
private		STRUCTURE	fac1;

// Build Templates 
public		TEMPLATE	trike;
public		TEMPLATE	buggy;
public		TEMPLATE	bloke;
public		TEMPLATE	jeep;
public		TEMPLATE	busCan,RKJeep,FireCan,FireTruck,RKBuggy;
public    PROPULSION LegsProp;

// groups
private		GROUP		attackGroup,defendGroup,wanderGroup,wanderGroup2;
private		DROID		newDroid, droid;

//message
private int			sender;
private string	message;


// attacking 
private		STRUCTURE  structure;
private		BASEOBJ    attacker,oTargetObj;
private   DROID      mydroid;
private   int  nTargetPlayer,nDefendDroids;
private   int  tAttacked,tWanderCoord,tWanderCoord2,tStartAttack;

private int nTemplScav,baseX,baseY,defSpotX,defSpotY,wanderX,wanderY,wanderX2,wanderY2;

private bool boolResult;

public FEATURESTAT oilRes;
private FEATURE feature;

//funct parameters
private   int _player,_targetPlayer,_x,_y;
private   STRUCTURESTAT _structure;
private   STRING _message;
private   GROUP _group;


private bool _DEBUG;

#region triggers

trigger consoleTr	(CALL_CONSOLE, ref sender, ref message);
trigger chainloadTr(wait, 10);
trigger prepareAttackTr(every, 100);
trigger regularTr(every, 100);
trigger scavAttackTr(every, 100);
trigger wanderTeam2Tr(every, 300);
trigger wanderTeamTr(every, 350);
trigger buildScavDroidTr (every, 50);
trigger doResearchTr (every, 30);
trigger formAllianceEventTr (wait, 1);

event structureAttacked;
event droidAttacked;
event startup;
event droidbuilt;
event startLevel;
event scavManagement;
event scavAttack;
event prepareAttack;
event wanderTeam;
event wanderTeam2;
event buildScavDroid;
event formAllianceEvent;
event doResearch;
event consoleEv;

#endregion triggers

function bool isPlayerStillLive(int _player);
function STRUCTURE closestEnemyDerrick(int _targetPlayer);
function bool bAnyOilResLeft();
function bool setWanderCoord();
function bool setWanderCoord2();
function int numRemainingOilRes();
function void printDebug( STRING _message );
function void sendMsgToAllAIs(STRING _message);
function void orderGroupScoutCMD(GROUP _group, int _x, int _y, int _range);

//==========================================================================
//                   EVENTS
//==========================================================================

//----------------------------------------------------------
// Startup
event startup(CALL_GAMEINIT)
{
	if (!scavengersActive() or !myResponsibility(enemy1))
	{
		setEventTrigger(startLevel, inactive);
		setEventTrigger(wanderTeam, inactive);
		setEventTrigger(wanderTeam2, inactive);
		setEventTrigger(prepareAttack, inactive);
		setEventTrigger(droidbuilt, inactive);
		setEventTrigger(buildScavDroid, inactive);
		setEventTrigger(structureAttacked, inactive);
		setEventTrigger(droidAttacked, inactive);
		setEventTrigger(formAllianceEvent, inactive);
		setEventTrigger(doResearch, inactive);
		setEventTrigger(consoleEv, inactive);
 	} else {
    _DEBUG = true;//print off debug messages
 	  tAttacked = 0;
 	  nTemplScav = 0;
	  wanderX = -1;
	  wanderY = -1;
	  wanderX2 = -1;
	  wanderY2 = -1;
    nDefendDroids = 5;
    defSpotX = -1;
    defSpotY = -1;
    tStartAttack = random(1800);
    tWanderCoord = 0;
    tWanderCoord2 = 0;
  	groupAddArea(defendGroup, enemy1, 0, 0, (mapWidth * 128), (mapHeight * 128));
  	console("DyDo-scav v"& SCAVAI_VERSION &" is active");
  	//advise AI player that this AI is dydo-scav
  	sendMsgToAllAIs("dydoscav");
	}
}
//----------------------------------------------------------------
event doResearch(doResearchTr)
{
  
  if ( getStructure(resLab , enemy1) == NULLOBJECT and gameTime < 100 ) {
    
    console("Scavenger AI has not detected any research lab and will try to add two of them in the map");
    //get the position of a factory
    initEnumStruct(false,factory,enemy1,enemy1);
  	structure= enumStruct();
  	if(structure != NULLOBJECT)
  	{
      buildX = structure.x;
      buildY = structure.y;
      //build first resLab
      if( pickStructLocation(resLab, ref buildX, ref buildY, enemy1) ){
        addStructure(resLab, enemy1, buildX, buildY);
        console("Scavenger AI has added first research labs at ("& buildX/TILE &"-"& buildY/TILE &")");
      }
      //build second resLab
      if( pickStructLocation(resLab, ref buildX, ref buildY, enemy1) ){
        addStructure(resLab, enemy1, buildX, buildY);
        console("Scavenger AI has added second research labs at ("& buildX/TILE &"-"& buildY/TILE &")");
      }
    } else {
      console("Scavenger AI has not been able to add research labs");
    }
    //if no resLabs (anymore) then stop event
    if ( getStructure(resLab , enemy1) == NULLOBJECT ){
      console("Scavenger AI has deactivated the research event as it has no research labs (anymore)");
      setEventTrigger(doResearch , inactive);
    }
  }

  initEnumStruct(false,resLab,enemy1,enemy1);
	structure= enumStruct();
	while(structure != NULLOBJECT)
	{
  	if( structureIdle(structure) and structureComplete(structure) ){
      //console("Scavenger AI performing a random research on structure ("& structure.id &")");
      skDoResearch(structure,enemy1,1); 
  	}
  	structure= enumStruct();
  }
 
}
//----------------------------------------------------------------
event formAllianceEvent(formAllianceEventTr)
{
	local int _player,_numPlayer;
	local bool _bool;
	
	_player = 0;
	_numPlayer = 0;
	_bool = true;
	
  while(_player < MAX_PLAYERS)
	{
		if( isPlayerStillLive(_player) and _player != enemy1 ){
		  _numPlayer++;
		}
    _player++;
  }
  
  //only for first player, this is a feature for 2 player games.
  if ( _numPlayer > 2 ){ exit; }
  
  _player=0;
  while(_player < MAX_PLAYERS)
	{
		if( _player != enemy1 and _bool){
			if( !isHumanPlayer(_player) and isPlayerStillLive(_player) and !allianceExistsBetween(enemy1,_player) )
			{
				createAlliance(enemy1,_player);
        console("Scavenger AI: Alliance created("& allianceExistsBetween(enemy1,_player) &") locked("& alliancesLocked() &") between scav AI '"& getPlayerName(enemy1) &"' player #"& enemy1 &" and '"& getPlayerName(_player) &"' ");
        printDebug("Scavenger AI: Alliance created ("& allianceExistsBetween(enemy1,_player) &")("& alliancesLocked() &") between scav AI '"& getPlayerName(enemy1) &"' player #"& enemy1 &" and '"& getPlayerName(_player) &"'");
        _bool = false; //only for first player, this is a feature for 2 player games.
			}
		}
		_player = _player + 1;
	}
}
//----------------------------------------------------------
event startLevel(CALL_START_NEXT_LEVEL)
{
	setEventTrigger(scavManagement, chainloadTr);
}
//----------------------------------------------------------
// We need to reguarly check back on our scavs, since they are stupid and forget their orders.
// (A nice way of saying we have bugs in our code.)
event scavManagement(inactive)
{
	if ((gameTime - tAttacked) > 300)
	{
    if ( defSpotX>0 and defSpotY>0){
      orderGroupScoutCMD(defendGroup,  defSpotX, defSpotY, SCAV_DEF_RANGE);
    } 
  }
	setEventTrigger(scavManagement, regularTr);
}
//----------------------------------------------------------
// sends wander group to a random oil resources
event wanderTeam(wanderTeamTr)
{
  local int _nMoved,_nTot;

  //close event after 8 min
  if ( !bAnyOilResLeft()) {
    if ( wanderGroup.members > 0 ){
      initIterateGroup(wanderGroup);
    	droid = iterateGroup(wanderGroup);
      while ( droid != NULLOBJECT){
        groupAddDroid(defendGroup, droid);
  		  droid = iterateGroup(wanderGroup);
      }
    }
    setEventTrigger(wanderTeam, inactive); 
    exit; 
  }

  _nTot = MIN_DEFEND_DROIDS+WANDER_DROIDS;

  if ( wanderGroup.members < 3 ){
    //if not enough units exit
    if ( defendGroup.members < _nTot ){ exit; }
    
    //console("Scavenger AI: preparing create a wanderGroup with ("& WANDER_DROIDS &") droids from defendGroup ("& defendGroup.members &")");
    initIterateGroup(defendGroup);
  	droid = iterateGroup(defendGroup);
    while ( wanderGroup.members < WANDER_DROIDS and droid != NULLOBJECT){
      if ( droid.propulsion != LegsProp ){
        groupAddDroid(wanderGroup, droid);
      }
  		droid = iterateGroup(defendGroup);
    }
    if ( wanderGroup.members == 0 ){ 
      //console("#### Scavenger AI: no droids moved to wanderGroup ");
      exit; 
    } //else {
      //console("Scavenger AI: built a wander group  with ("& wanderGroup.members &") droids");
    //}
  }

  //set wander coord (free oilRes)
  if ( !setWanderCoord() ){
    if ( !setWanderCoord() ){
      //console("#### Scavenger AI: not able to set wander coord - 2");
      exit;
    }
  }
  
  //moving to oilRes
  //console("Scavenger AI: ("& wanderGroup.members  &") scavenger droids wandering to oilRes at ("& wanderX/TILE &"-"& wanderY/TILE &")");
  orderGroupLoc(wanderGroup, DORDER_SCOUT, wanderX, wanderY);

    
  
}
//----------------------------------------------------------
event wanderTeam2(wanderTeam2Tr)
{
  local int _nMoved,_nTot;

  //close event after 8 min
  if ( !bAnyOilResLeft()) {
    if ( wanderGroup2.members > 0 ){
      initIterateGroup(wanderGroup2);
    	droid = iterateGroup(wanderGroup2);
      while ( droid != NULLOBJECT){
        groupAddDroid(defendGroup, droid);
  		  droid = iterateGroup(wanderGroup2);
      }
    }
    setEventTrigger(wanderTeam, inactive); 
    exit; 
  }

  _nTot = MIN_DEFEND_DROIDS+WANDER_DROIDS;

  if ( wanderGroup2.members < 3 ){
    //if not enough units exit
    if ( defendGroup.members < _nTot ){ exit; }
    
    //console("Scavenger AI: preparing create a wanderGroup #2 with ("& WANDER_DROIDS &") droids from defendGroup ("& defendGroup.members &")");
    initIterateGroup(defendGroup);
  	droid = iterateGroup(defendGroup);
    while ( wanderGroup2.members < WANDER_DROIDS and droid != NULLOBJECT){
      if ( droid.propulsion != LegsProp ){
        groupAddDroid(wanderGroup2, droid);
      }
  		droid = iterateGroup(defendGroup);
    }
    if ( wanderGroup2.members == 0 ){ 
      //console("#### Scavenger AI: no droids moved to wanderGroup #2 ");
      exit; 
    } //else {
      //console("Scavenger AI: built a wander group #2 with ("& wanderGroup2.members &") droids");
    //}
  }

  //set wander coord (free oilRes)
  if ( !setWanderCoord2() ){
    if ( !setWanderCoord2() ){
      //console("#### Scavenger AI: not able to set wander coord - 2");
      exit;
    }
  }
  
  //moving to oilRes
  //console("Scavenger AI: ("& wanderGroup2.members  &") scavenger wander group 2 wandering to oilRes at ("& wanderX2/TILE &"-"& wanderY2/TILE &")");
  orderGroupLoc(wanderGroup2, DORDER_SCOUT, wanderX2, wanderY2);

    
  
}
//----------------------------------------------------------
// activate attack if conditions are ok
event prepareAttack(prepareAttackTr)
{
  local int _nMoved, _nTot;
  local int _player,_nCounter,_nHumanPlayer,_nAIPlayer;
  
  _nTot = MIN_ATT_DROIDS+MIN_DEFEND_DROIDS;
  //console("Scavenger AI: defendGroup ("& defendGroup.members &") ("& nDefendDroids &")("& MIN_ATT_DROIDS &")");
  
  if ( gameTime < TIME_FIRST_ATTACK+tStartAttack ){ exit; }
  if ( attackGroup.members > 0 ){ exit; }
  if ( defendGroup.members < _nTot ){ exit; }
  
  _nMoved = 0;
  //console("Scavenger AI: preparing to move ("& MIN_ATT_DROIDS &") droids to attackGroup from defendGroup ("& defendGroup.members &")");
  initIterateGroup(defendGroup);
	droid = iterateGroup(defendGroup);
  while ( _nMoved <= MIN_ATT_DROIDS and droid != NULLOBJECT){
    _nMoved++;
    groupAddDroid(attackGroup, droid);
		droid = iterateGroup(defendGroup);
  }
    
  
  if ( attackGroup.members == 0 ){ 
    //console("#### Scavenger AI: no droids moved to attackGroup ");
    exit; 
  } //else {
    //console("Scavenger AI: built an attacking group  with ("& attackGroup.members &") droids");
  //}

 //find human player
  _player       = random(8);
  _nCounter     = 0;
  _nHumanPlayer = -1;
  _nAIPlayer    = -1;
  nTargetPlayer = -1;
  while ( _nCounter < MAX_PLAYERS and _nHumanPlayer == -1 ){    
    if ( isPlayerStillLive(_player) ){
      if ( isHumanPlayer( _player ) ){
         _nHumanPlayer = _player;
      } else {
        if ( _nAIPlayer == -1 and _player != enemy1 ){ _nAIPlayer = _player; }
      }
    }
    _player++;
    if ( _player >= 8 ) {  _player = 0;  }
    _nCounter++;
  }

  if ( _nHumanPlayer == -1 ){
    //console("#### Scavenger AI - prepareAttack: Human player not found ??");
    exit;
  }
    
  nTargetPlayer = _nHumanPlayer;
  //console("Scavenger AI: Target is Human player '"& getPlayerName(nTargetPlayer)  &"' with "& attackGroup.members &" droids");
  printDebug("Scavenger attacking human player '"& getPlayerName(nTargetPlayer)  &"' with "& attackGroup.members &" droids");


  setEventTrigger(scavAttack,	scavAttackTr);
  
}
//----------------------------------------------------------
// Sometimes one single scav attacking droid moves too slowly and never reaches 
// the target
event scavAttack(inactive)
{
  if ( attackGroup.members < 2 or !isPlayerStillLive(nTargetPlayer) ){
    if ( attackGroup.members > 0 ){
      initIterateGroup(attackGroup);
    	droid = iterateGroup(attackGroup);
      while ( droid != NULLOBJECT){
        groupAddDroid(defendGroup, droid);
    		droid = iterateGroup(attackGroup);
      }
    }
    oTargetObj    = NULLOBJECT;
    nTargetPlayer = -1;
    //console("#### Scavenger AI - scavAttack: attack deactivated");
    setEventTrigger(scavAttack,	inactive);
    exit;
  }
  
  if ( oTargetObj == NULLOBJECT ){
    oTargetObj = closestEnemyDerrick(nTargetPlayer);
    if ( oTargetObj == NULLOBJECT ){
      oTargetObj = skLocateEnemy(nTargetPlayer);
      if ( oTargetObj == NULLOBJECT ){
        //console("#### Scavenger AI - scavAttack: target not found ??");
        exit;
      } //else {
        //console("Scavenger AI: new target object found");
      //}
    } //else {
      //console("Scavenger AI - scavAttack: target is derrick ?");
    //}
  }   
  //console("Scavenger AI: attacking with ("& attackGroup.members &") droids player ("& getPlayerName(nTargetPlayer) &") at coord ("& oTargetObj.x/TILE &"-"& oTargetObj.y/TILE &") ");
  orderGroupLoc( attackGroup, DORDER_SCOUT, oTargetObj.x, oTargetObj.y );
}

//----------------------------------------------------------
// build scavenger droids
event buildScavDroid(buildScavDroidTr)
{
  local     int       _nRnd;
  private		TEMPLATE  _tmpl;
  
  //_nRnd = random(9);
  
  initEnumStruct(false,factory,enemy1,enemy1);
  structure = enumStruct();
  while(structure != NULLOBJECT)
  {     
  	if(structureIdle(structure)){
      _nRnd = nTemplScav;
      //console("Scavenger AI : builds template # ("& _nRnd &") on struct ("& structure.id &") power("& playerPower(enemy1) &")"); 
      if ( _nRnd == 0 ){ buildDroid(trike, structure, enemy1, 1); }
      if ( _nRnd == 1 ){ buildDroid(buggy, structure, enemy1, 1); }
      if ( _nRnd == 2 ){ buildDroid(bloke, structure, enemy1, 1); }
      if ( _nRnd == 3 ){ buildDroid(jeep, structure, enemy1, 1); }
      if ( _nRnd == 4 ){ buildDroid(busCan, structure, enemy1, 1); }
      if ( _nRnd == 5 ){ buildDroid(RKJeep, structure, enemy1, 1); }
      if ( _nRnd == 6 ){ buildDroid(RKBuggy, structure, enemy1, 1); }
      if ( _nRnd == 7 ){ buildDroid(FireCan, structure, enemy1, 1); }
      if ( _nRnd == 8 ){ buildDroid(FireTruck, structure, enemy1, 1); }
      nTemplScav++;
      if ( nTemplScav >= 9 ){ nTemplScav = 0; }
    }
    structure = enumStruct();
  }    
}


//----------------------------------------------------------
// deal with a droid being built
event droidbuilt(CALL_NEWDROID, enemy1, ref newDroid, ref fac1)
{
	groupAddDroid(defendGroup, newDroid);
}


//----------------------------------------------------------
// watch for structures being attacked. Send the cavalry as required.
event structureAttacked(CALL_STRUCT_ATTACKED, enemy1, ref structure, ref attacker)
{
	local DROID _droid;
	local int _dist;
	
  if ((gameTime - tAttacked) > 300)
	{		
    
    if (attacker.type == OBJ_DROID){
      _droid = objToDroid(attacker);
  		if ( !isVtol(_droid) ){
        orderGroupScoutCMD(defendGroup,  attacker.x, attacker.y, SCAV_DEF_RANGE);
        defSpotX = structure.x;
  		  defSpotY = structure.y;
  		  tAttacked = gameTime;
  		}
		} else {
      _dist = distBetweenTwoPoints(structure.x, structure.y, attacker.x, attacker.y);
      if ( _dist < 24*TILE ){
        orderGroupScoutCMD(defendGroup,  attacker.x, attacker.y, SCAV_DEF_RANGE);
        defSpotX = structure.x;
  		  defSpotY = structure.y;
  		  tAttacked = gameTime;
      }
    }
	
  }
}

//----------------------------------------------------------
// watch for droids being attacked. Send the cavalry as required.
event droidAttacked(CALL_DROID_ATTACKED, enemy1, ref mydroid, ref attacker)
{
	local DROID _droid;
	local int _dist,_x,_y;
	
	if ( mydroid.group == attackGroup ){ exit; }
  if ( mydroid != NULLOBJECT ){
    _x = mydroid.x;
    _y = mydroid.y;
  } else {
    if ( attacker != NULLOBJECT ){
      _x = attacker.x;
      _y = attacker.y;
    } else {
      exit;
    }
  }
	
  if ((gameTime - tAttacked) > 300){		
    
    if ( attacker != NULLOBJECT ){
      if (attacker.type == OBJ_DROID){
        _droid = objToDroid(attacker);
    		if ( !isVtol(_droid) ){
          orderGroupScoutCMD(defendGroup,  attacker.x, attacker.y, SCAV_DEF_RANGE);
          defSpotX = mydroid.x;
    		  defSpotY = mydroid.y;
    		  tAttacked = gameTime;
    		}
  		} else {
        _dist = distBetweenTwoPoints(_x,_y, attacker.x, attacker.y);
        if ( _dist < 24*TILE ){
          orderGroupScoutCMD(defendGroup,  attacker.x, attacker.y, SCAV_DEF_RANGE);
          defSpotX = _x;
    		  defSpotY = _y;
    		  tAttacked = gameTime;
        }
      }
    }
	
  }
}
//----------------------------------------------------------
event consoleEv(consoleTr)  //(CALL_CONSOLE, ref sender, ref message);
{
  //console(getPlayerName(player) & " console sender ("& sender &") message ("& message &")");
  local string _strAIDesc;
  
  if ( !isPlayerStillLive(enemy1) ){ exit; }
  
  if( message == "are you dydoscav" or message == "are you dydo-scav" or message == "are you dydoscav?" or message == "are you dydo-scav?" or message == "who are you?" or message == "who are you" )
	{
	  msg("I am dydo-scav version '"& SCAVAI_VERSION &"' ",enemy1, sender);
	}
}
// ======================================================
//
//    FUNCTIONS
//
// ======================================================

//-----------------------------------------------------------------------------
function bool isPlayerStillLive(int _player)
{
  if ( anyDroidsLeft(_player) or anyFactoriesLeft(_player) ){
    return true;
  } 
  return false;
}
//-----------------------------------------------------------------------------
function STRUCTURE closestEnemyDerrick(int _targetPlayer)
{
	
  local	int				  _bestDist, _tempDist;
	local	STRUCTURE		_derrick, _tempDerrick;
  
	_bestDist   = 999*TILE;
	_derrick    = NULLOBJECT;
  _tempDist   = 0;
  
  //a target player is required?
  if ( _targetPlayer > -1 ){

    initEnumStruct(false,derrick,_targetPlayer,_targetPlayer);
  	_tempDerrick = enumStruct();
  	while(_tempDerrick != NULLOBJECT)
  	{
      _tempDist = distBetweenTwoPoints(_tempDerrick.x, _tempDerrick.y, attackGroup.x, attackGroup.y);
      if (_tempDist < _bestDist ){
        _derrick   = _tempDerrick;
        _bestDist  = _tempDist;
     	}
   		_tempDerrick = enumStruct();
   	}//while
   	   	
 	}  
  return _derrick;  
}
//-----------------------------------------------------------------------------
function bool bAnyOilResLeft()
{
  local DROID _droid;
  boolResult = true;

  InitEnumDroids(enemy1,enemy1);
  _droid = EnumDroid();
  while ( _droid != NULLOBJECT and boolResult ){
    if (_droid != NULLOBJECT){ boolResult = false;}
    _droid = EnumDroid();
  }

  if ( _droid == NULLOBJECT ){
    return false;
  }
	
  initGetFeature(oilRes,-1,enemy1);
	feature = getFeature(enemy1);
  while(feature != NULLOBJECT)
	{
     if ( droidCanReach(_droid, feature.x, feature.y) ){
	     return true;
     }
     feature = getFeature(enemy1);
	}

  return false;
}
//-----------------------------------------------------------------------------
function bool setWanderCoord()
{
  local DROID _droid;
  local FEATURE _oilRes;
  local int _bestDist,_dist;
	local int _nOil,_count;
  
	boolResult = true;

  InitEnumDroids(enemy1,enemy1);
  _droid = EnumDroid();
  while ( _droid != NULLOBJECT and boolResult ){
    if (_droid != NULLOBJECT){ boolResult = false;}
    _droid = EnumDroid();
  }

  if ( _droid == NULLOBJECT ){
    return false;
  }
	
  //_bestDist = 999999;
  _nOil     = random(numRemainingOilRes());
  _count    = 0;
  initGetFeature(oilRes,-1,enemy1);
	feature = getFeature(enemy1);
  while(feature != NULLOBJECT)
	{
     if ( droidCanReach(_droid, feature.x, feature.y) and _nOil == _count ){
       _dist = distBetweenTwoPoints(feature.x, feature.y, wanderGroup.x, wanderGroup.y);
       if ( _dist > 8 * TILE or tWanderCoord - gameTime > 1200){
         _oilRes = feature;
       }
	   }
     feature = getFeature(enemy1);
	   _count++;
  }
	if ( _oilRes != NULLOBJECT ){
	 tWanderCoord = gameTime;
   //console("Scavenger AI - setWanderCoord, coord set to ("& wanderX/TILE &"-"& wanderY/TILE &")");
   wanderX = _oilRes.x;
	 wanderY = _oilRes.y;
	 return true;
  }

  return false;
}
//-----------------------------------------------------------------------------
function bool setWanderCoord2()
{
  local DROID _droid;
  local FEATURE _oilRes;
  local int _bestDist,_dist;
	local int _nOil,_count;
  
	boolResult = true;

  InitEnumDroids(enemy1,enemy1);
  _droid = EnumDroid();
  while ( _droid != NULLOBJECT and boolResult ){
    if (_droid != NULLOBJECT){ boolResult = false;}
    _droid = EnumDroid();
  }

  if ( _droid == NULLOBJECT ){
    return false;
  }
	
  //_bestDist = 999999;
  _nOil     = random(numRemainingOilRes());
  _count    = 0;
  initGetFeature(oilRes,-1,enemy1);
	feature = getFeature(enemy1);
  while(feature != NULLOBJECT)
	{
     if ( droidCanReach(_droid, feature.x, feature.y) and _nOil == _count ){
       _dist = distBetweenTwoPoints(feature.x, feature.y, wanderGroup2.x, wanderGroup2.y);
       if ( _dist > 8 * TILE or tWanderCoord2 - gameTime > 1200){
         _oilRes = feature;
       }
	   }
     feature = getFeature(enemy1);
	   _count++;
  }
	if ( _oilRes != NULLOBJECT ){
	 tWanderCoord2 = gameTime;
   //console("Scavenger AI - setWanderCoord, coord set to ("& wanderX2/TILE &"-"& wanderY2/TILE &")");
   wanderX2 = _oilRes.x;
	 wanderY2 = _oilRes.y;
	 return true;
  }

  return false;
}
//-----------------------------------------------------------------------------
function int numRemainingOilRes()
{
  local FEATURE _tempOilRes;
  local int _nTot;
  _nTot=0;
  
  initGetFeature(oilRes,-1,enemy1);
	_tempOilRes = getFeature(enemy1);
	while(_tempOilRes != NULLOBJECT and _nTot < MAX_WHILE_LOOPS)
	{
		_nTot++;
    _tempOilRes = getFeature(enemy1);
	}
	
  return _nTot;
}
//-----------------------------------------------------------------------------
function void printDebug( STRING _message )
{
 if ( _DEBUG ){
  debug( GAME_TIME_IN_MIN &"min; "& getPlayerName(enemy1) &" #"& enemy1 &" [ x - x ] ;0 ;" & _message);
 }
}
//-----------------------------------------------------------------------------
function void sendMsgToAllAIs(STRING _message)
{
  local int _player; 
  _player = 0;
  while ( _player < MAX_PLAYERS ){
    if( !isHumanPlayer(_player) and isPlayerStillLive(_player) )
    { 
      msg(_message, enemy1, _player );
    }
    _player++;
  }
}
//----------------------------------------------------------
function void orderGroupScoutCMD(GROUP _group, int _x, int _y, int _range)
{
  initIterateGroup(_group);
  droid = iterateGroup(_group);
  while ( droid != NULLOBJECT){
  	if (distBetweenTwoPoints( droid.x, droid.y, _x, _y) < _range){
      orderDroidLoc(droid, DORDER_SCOUT, _x, _y);
    }
    droid = iterateGroup(_group);
  }
}
 
